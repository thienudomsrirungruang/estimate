{"version":3,"sources":["GameEstimate.js","GameAnswer.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["GameEstimate","props","useState","gameData","questions","Math","floor","random","length","question","answerInput","setAnswerInput","setGameState","setAnswerProps","score","setScore","inputBox","useRef","useEffect","current","focus","id","title","unit","ref","type","value","onChange","e","target","onKeyDown","key","correct","userAnswer","parseFloat","lowerBound","answer","tolerance","upperBound","validateAnswer","GameAnswer","answerProps","downHandler","window","addEventListener","removeEventListener","className","correctAnswer","Game","gameState","renderWindow","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ugBAkEeA,MA7Df,SAAsBC,GAAQ,IAAD,EACOC,mBAASC,EAASC,UAAUC,KAAKC,MAAMD,KAAKE,SAAWJ,EAASC,UAAUI,UADjF,mBAClBC,EADkB,aAEaP,mBAAS,KAFtB,mBAElBQ,EAFkB,KAELC,EAFK,KAInBC,EAAeX,EAAMW,aACrBC,EAAiBZ,EAAMY,eACvBC,EAAQb,EAAMa,MACdC,EAAWd,EAAMc,SAGjBC,EAAWC,iBAAO,MAmCxB,OAJAC,qBAAU,WACNF,EAASG,QAAQC,UAClB,IAGC,yBAAKC,GAAG,QACJ,gCACI,2BAAIZ,EAASa,MAAb,OAAwBb,EAASc,MACjC,2BACIC,IAAKR,EACLS,KAAK,OACLC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAeiB,EAAEC,OAAOH,QACzCI,UA5BhB,SAA4BF,GACxB,GAAa,UAAVA,EAAEG,IAAgB,CACjB,IAAIC,EAbZ,WACI,IAAIC,EAAaC,WAAWxB,GACxByB,EAAa1B,EAAS2B,OAAS3B,EAAS4B,UACxCC,EAAa7B,EAAS2B,OAAS3B,EAAS4B,UACxCL,EAAUG,GAAcF,GAAcA,GAAcK,EAIxD,OAHGN,GACCjB,EAASD,EAAQ,GAEdkB,EAKWO,GACd1B,EAAe,CACX,WAAcH,EACd,cAAiBD,EAAS2B,OAC1B,UAAa3B,EAAS4B,UACtB,QAAWL,IAEfpB,EAAa,U,MCQV4B,MA3Cf,SAAoBvC,GAEhB,IAAMwC,EAAcxC,EAAMwC,YACpB3B,EAAQb,EAAMa,MACdF,EAAeX,EAAMW,aAE3B,SAAS8B,EAAT,GACgB,UADY,EAANX,KAEdnB,EAAa,GAWrB,OAPAM,qBAAU,WAEN,OADAyB,OAAOC,iBAAiB,UAAWF,GAC5B,WACLC,OAAOE,oBAAoB,UAAWH,MAEzC,IAGC,gCACI,uBAAGI,UAAU,WACRL,EAAYT,QAAU,WAAa,cAExC,uBAAGc,UAAU,YACR,mBAAqBL,EAAYM,eAEtC,uBAAGD,UAAU,YACR,gBAAkBL,EAAYR,YAEnC,uBAAGa,UAAU,YACR,cAAgBL,EAAYJ,WAEjC,uBAAGS,UAAU,YACR,UAAYhC,GAEjB,uBAAGO,GAAG,eAAN,6BCGG2B,MAvCf,WAAiB,IAAD,EAEsB9C,mBAAS,GAF/B,mBAEL+C,EAFK,KAEMrC,EAFN,OAI0BV,mBAAS,CAC3C,WAAc,KACd,cAAiB,KACjB,UAAa,KACb,QAAW,OARH,mBAILuC,EAJK,KAIQ5B,EAJR,OAWcX,mBAAS,GAXvB,mBAWLY,EAXK,KAWEC,EAXF,KAkCZ,OArBA,WACI,OAAOkC,GACH,KAAK,EACL,KAAK,EACD,OAAO,kBAAC,EAAD,CACKrC,aAAcA,EACdC,eAAgBA,EAChBC,MAAOA,EACPC,SAAUA,IAE1B,KAAK,EACD,OAAO,kBAAC,EAAD,CACKH,aAAcA,EACd6B,YAAaA,EACb3B,MAAOA,IAEvB,QACI,OAAO,MAKfoC,IC5BOC,MARf,WACE,OACE,yBAAK9B,GAAG,UACN,kBAAC,EAAD,QCKc+B,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9d751fa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useState, useEffect, useRef} from 'react';\r\nimport gameData from './gameData.json';\r\nimport './GameEstimate.css';\r\n\r\nfunction GameEstimate(props) {\r\n    const [question, setQuestion] = useState(gameData.questions[Math.floor(Math.random() * gameData.questions.length)]);\r\n    const [answerInput, setAnswerInput] = useState(\"\");\r\n\r\n    const setGameState = props.setGameState\r\n    const setAnswerProps = props.setAnswerProps\r\n    const score = props.score\r\n    const setScore = props.setScore\r\n\r\n\r\n    const inputBox = useRef(null);\r\n\r\n    // function changeQuestion(){\r\n    //     setQuestion(gameData.questions[Math.floor(Math.random() * gameData.questions.length)]);\r\n    // }\r\n    function validateAnswer(){\r\n        var userAnswer = parseFloat(answerInput)\r\n        var lowerBound = question.answer / question.tolerance\r\n        var upperBound = question.answer * question.tolerance\r\n        var correct = lowerBound <= userAnswer && userAnswer <= upperBound\r\n        if(correct){\r\n            setScore(score + 1)\r\n        }\r\n        return correct\r\n    }\r\n\r\n    function handleInputKeyDown(e){\r\n        if(e.key === \"Enter\"){\r\n            var correct = validateAnswer();\r\n            setAnswerProps({\r\n                \"userAnswer\": answerInput,\r\n                \"correctAnswer\": question.answer,\r\n                \"tolerance\": question.tolerance,\r\n                \"correct\": correct\r\n            })\r\n            setGameState(2);\r\n            // changeQuestion();\r\n            // setAnswerInput(\"\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        inputBox.current.focus();\r\n    }, [])\r\n\r\n    return(\r\n        <div id=\"game\">\r\n            <center>\r\n                <p>{question.title} in {question.unit}</p>\r\n                <input\r\n                    ref={inputBox}\r\n                    type=\"text\"\r\n                    value={answerInput}\r\n                    onChange={(e) => setAnswerInput(e.target.value)}\r\n                    onKeyDown={handleInputKeyDown}\r\n                />\r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameEstimate;\r\n","import React from 'react';\r\nimport {useEffect} from 'react';\r\nimport './GameAnswer.css';\r\n\r\n\r\nfunction GameAnswer(props) {\r\n\r\n    const answerProps = props.answerProps;\r\n    const score = props.score;\r\n    const setGameState = props.setGameState;\r\n\r\n    function downHandler({key}) {\r\n        if (key === \"Enter\") {\r\n            setGameState(1);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', downHandler);\r\n        return () => {\r\n          window.removeEventListener('keydown', downHandler);\r\n        };\r\n    }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n    return(\r\n        <center>\r\n            <p className=\"bigText\">\r\n                {answerProps.correct ? \"Correct!\" : \"Incorrect!\"}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Correct answer: \" + answerProps.correctAnswer}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Your answer: \" + answerProps.userAnswer}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Tolerance: \" + answerProps.tolerance}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Score: \" + score}\r\n            </p>\r\n            <p id=\"continueMsg\">\r\n                Press enter to continue\r\n            </p>\r\n        </center>\r\n    );\r\n}\r\n\r\nexport default GameAnswer;\r\n","import React, { useEffect } from 'react';\r\nimport {useState} from 'react';\r\nimport GameEstimate from './GameEstimate.js';\r\nimport GameAnswer from './GameAnswer.js';\r\n\r\nfunction Game() {\r\n\r\n    const [gameState, setGameState] = useState(1);\r\n\r\n    const [answerProps, setAnswerProps] = useState({\r\n        \"userAnswer\": null,\r\n        \"correctAnswer\": null,\r\n        \"tolerance\": null,\r\n        \"correct\": null\r\n    });\r\n\r\n    const [score, setScore] = useState(0);\r\n\r\n    function renderWindow(){\r\n        switch(gameState){\r\n            case 0:\r\n            case 1:\r\n                return <GameEstimate\r\n                            setGameState={setGameState}\r\n                            setAnswerProps={setAnswerProps} \r\n                            score={score}\r\n                            setScore={setScore}\r\n                        />\r\n            case 2:\r\n                return <GameAnswer\r\n                            setGameState={setGameState}\r\n                            answerProps={answerProps}\r\n                            score={score}\r\n                        />\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return(\r\n        renderWindow()\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Game from './Game.js';\n\nfunction App() {\n  return (\n    <div id=\"window\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}