{"version":3,"sources":["GameEstimate.js","GameAnswer.js","Game.js","TopBar.js","App.js","serviceWorker.js","index.js"],"names":["GameEstimate","props","useState","answerInput","setAnswerInput","exponentInput","setExponentInput","setGameState","setAnswerProps","score","setScore","inputBox","useRef","setTopBarPercent","Date","now","startTimestamp","question","setQuestion","validateAnswer","userAnswer","lowerBound","answer","tolerance","upperBound","console","log","correct","handleInputKeyDown","e","key","Math","pow","useEffect","quantity","gameData","quantities","floor","random","length","unit","units","name","value","current","focus","setTimeout","millis","NaN","outOfTime","id","title","ref","type","onChange","target","onKeyDown","GameAnswer","enterKeyUp","setEnterKeyUp","answerProps","downHandler","upHandler","formatNumber","number","precision","upThreshold","downThreshold","Number","toPrecision","oom","window","addEventListener","removeEventListener","className","correctAnswer","style","Game","gameState","renderWindow","TopBar","topBarStyle","width","topBarPercent","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ba3cf32.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useState, useEffect, useRef} from 'react';\r\nimport gameData from './gameData.json';\r\nimport './GameEstimate.css';\r\n\r\nfunction GameEstimate(props) {\r\n    const [answerInput, setAnswerInput] = useState(\"\");\r\n    const [exponentInput, setExponentInput] = useState(\"\");\r\n\r\n    const setGameState = props.setGameState;\r\n    const setAnswerProps = props.setAnswerProps;\r\n    const score = props.score;\r\n    const setScore = props.setScore;\r\n\r\n    const inputBox = useRef(null);\r\n\r\n    const setTopBarPercent = props.setTopBarPercent;\r\n\r\n    const [startTimestamp, setStartTimestamp] = useState(Date.now());\r\n\r\n    const [question, setQuestion] = useState({\r\n        \"title\": \"\",\r\n        \"unit\": \"\",\r\n        \"answer\": \"\",\r\n        \"tolerance\": 0\r\n    });\r\n\r\n    useEffect(() => {\r\n        var quantity = gameData.quantities[Math.floor(Math.random() * gameData.quantities.length)];\r\n        var unit = gameData.units[Math.floor(Math.random() * gameData.units.length)];\r\n        setQuestion({\r\n            \"title\": quantity.name,\r\n            \"unit\": unit.name,\r\n            \"answer\": quantity.value / unit.value,\r\n            \"tolerance\": 10\r\n        });\r\n    }, []);\r\n\r\n    function validateAnswer(userAnswer){\r\n        // var userAnswer = parseFloat(answerInput) * 10 ** parseFloat(exponentInput);\r\n        var lowerBound = question.answer / question.tolerance;\r\n        var upperBound = question.answer * question.tolerance;\r\n        console.log(lowerBound);\r\n        console.log(upperBound);\r\n        console.log(userAnswer);\r\n        var correct = lowerBound <= userAnswer && userAnswer <= upperBound;\r\n        if(correct){\r\n            setScore(score + 1);\r\n        }\r\n        return correct;\r\n    }\r\n\r\n    function handleInputKeyDown(e){\r\n        if(e.key === \"Enter\"){\r\n            var userAnswer = (answerInput === \"\" ? 1 : answerInput) * Math.pow(10, (exponentInput === \"\" ? 0 : exponentInput));\r\n            var correct = validateAnswer(userAnswer);\r\n            setAnswerProps({\r\n                \"userAnswer\": userAnswer,\r\n                \"correctAnswer\": question.answer,\r\n                \"tolerance\": question.tolerance,\r\n                \"correct\": correct,\r\n                \"outOfTime\": false\r\n            });\r\n            setGameState(2);\r\n            // changeQuestion();\r\n            // setAnswerInput(\"\");\r\n        }\r\n    }\r\n\r\n    function outOfTime(){\r\n        var correct = validateAnswer();\r\n        setAnswerProps({\r\n            \"userAnswer\": NaN,\r\n            \"correctAnswer\": question.answer,\r\n            \"tolerance\": question.tolerance,\r\n            \"correct\": correct,\r\n            \"outOfTime\": true\r\n        });\r\n        setGameState(2);\r\n    }\r\n\r\n    useEffect(() => {\r\n        inputBox.current.focus();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            var millis = 15000 - Date.now() + startTimestamp;\r\n            if(millis < 0){\r\n                outOfTime();\r\n            }\r\n            setTopBarPercent(millis / 15000);\r\n        }, 30);\r\n    });\r\n\r\n    return(\r\n        <div id=\"game\">\r\n            <center>\r\n                <p>{question.title} in {question.unit}</p>\r\n                <input\r\n                    ref={inputBox}\r\n                    type=\"text\"\r\n                    value={answerInput}\r\n                    onChange={(e) => setAnswerInput(e.target.value)}\r\n                    onKeyDown={handleInputKeyDown}\r\n                />\r\n                Ã—10^\r\n                <input\r\n                    type=\"text\"\r\n                    value={exponentInput}\r\n                    onChange={(e) => setExponentInput(e.target.value)}\r\n                    onKeyDown={handleInputKeyDown}\r\n                />\r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameEstimate;\r\n","import React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport './GameAnswer.css';\r\n\r\n\r\nfunction GameAnswer(props) {\r\n\r\n    const [enterKeyUp, setEnterKeyUp] = useState(false);\r\n\r\n    const answerProps = props.answerProps;\r\n    const score = props.score;\r\n    const setGameState = props.setGameState;\r\n\r\n    function downHandler({key}) {\r\n        if (key === \"Enter\") {\r\n            if(enterKeyUp){\r\n                setGameState(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function upHandler({key}) {\r\n        if (key === \"Enter\") {\r\n            setEnterKeyUp(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', downHandler);\r\n        window.addEventListener('keyup', upHandler)\r\n        return () => {\r\n          window.removeEventListener('keydown', downHandler);\r\n          window.removeEventListener('keyup', upHandler);\r\n        };\r\n    }, [enterKeyUp]); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n    // upThreshold/downThreshold: order of magnitude to use scientific\r\n    function formatNumber(number, precision, upThreshold, downThreshold) {\r\n        number = Number(number.toPrecision(precision));\r\n        if(number < Math.pow(10, downThreshold) || number >= Math.pow(10, upThreshold)){\r\n            var oom = Math.floor(Math.log(number) / Math.log(10));\r\n            var magnitude = number / Math.pow(10, oom);\r\n            return magnitude + \"e\" + oom;\r\n        }\r\n        return number;\r\n    }\r\n    \r\n    return(\r\n        <center>\r\n            <p className=\"bigText\">\r\n                {answerProps.outOfTime ? \"Out of Time!\" : (answerProps.correct ? \"Correct!\" : \"Incorrect!\")}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Correct answer: \" + formatNumber(answerProps.correctAnswer, 5, 6, -3)}\r\n            </p>\r\n            <p className=\"bodyText\" style={{\"display\": (answerProps.outOfTime ? \"none\" : \"initial\")}}>\r\n                {\"Your answer: \" + formatNumber(answerProps.userAnswer, 5, 6, -3)}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Tolerance: \" + answerProps.tolerance}\r\n            </p>\r\n            <p className=\"bodyText\">\r\n                {\"Score: \" + score}\r\n            </p>\r\n            <p id=\"continueMsg\">\r\n                Press enter to continue\r\n            </p>\r\n        </center>\r\n    );\r\n}\r\n\r\nexport default GameAnswer;\r\n","import React from 'react';\r\nimport {useState} from 'react';\r\nimport GameEstimate from './GameEstimate.js';\r\nimport GameAnswer from './GameAnswer.js';\r\nimport './Game.css';\r\n\r\nfunction Game(props) {\r\n\r\n    const [gameState, setGameState] = useState(1);\r\n\r\n    const [answerProps, setAnswerProps] = useState({\r\n        \"userAnswer\": null,\r\n        \"correctAnswer\": null,\r\n        \"tolerance\": null,\r\n        \"correct\": null\r\n    });\r\n\r\n    const [score, setScore] = useState(0);\r\n\r\n    const setTopBarPercent = props.setTopBarPercent;\r\n    \r\n    function renderWindow(){\r\n        switch(gameState){\r\n            case 0:\r\n            case 1:\r\n                return <GameEstimate\r\n                            setGameState={setGameState}\r\n                            setAnswerProps={setAnswerProps} \r\n                            score={score}\r\n                            setScore={setScore}\r\n                            setTopBarPercent={setTopBarPercent}\r\n                        />\r\n            case 2:\r\n                setTopBarPercent(0);\r\n                return <GameAnswer\r\n                            setGameState={setGameState}\r\n                            answerProps={answerProps}\r\n                            score={score}\r\n                        />\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id=\"game-wrapper\">\r\n            {renderWindow()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport './TopBar.css';\r\n\r\nfunction TopBar(props) {\r\n\r\n    const topBarPercent = props.topBarPercent;\r\n\r\n    const topBarStyle = {\r\n        width: topBarPercent * 100 + \"%\"\r\n    };\r\n\r\n    return (\r\n        <div id=\"bar-wrapper\">\r\n            <div id=\"bar\" style={topBarStyle}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopBar;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Game from './Game.js';\r\nimport TopBar from './TopBar.js';\r\n\r\nfunction App() {\r\n    const [topBarPercent, setTopBarPercent] = useState(0.5)\r\n    return (\r\n        <div id=\"window\">\r\n            <TopBar\r\n                topBarPercent={topBarPercent}\r\n            />\r\n            <Game\r\n                setTopBarPercent={setTopBarPercent}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}